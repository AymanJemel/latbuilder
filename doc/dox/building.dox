# Copyright (c) 2012 David Munger, Pierre L'Ecuyer, Université de Montréal.
# 
# This file is part of Lattice Builder.
# 
# Lattice Builder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Lattice Builder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Lattice Builder.  If not, see <http://www.gnu.org/licenses/>.

/** \page building Building

Building Lattice Builder consists of the following steps:
- Installing a \ref builddeps_compiler
- Installing a \ref builddeps_python
- Installing the \ref builddeps_boost
- Installing the \ref builddeps_fftw
- Optionally installing <a href="http://git-scm.com/">Git</a>
- Optionally installing <a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a>
- \ref sourcecode
- \ref buildcompile
- \ref buildlink


\section builddeps Requirements

\subsection builddeps_compiler C++11-Compliant Compiler

Compiling Lattice Builder requires a C++ compiler that partially supports the
<a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=50372">C++11 standard</a>,
such as g++ from the
<a href="http://gcc.gnu.org/">GNU Compiler Collection</a>
version 4.7 or later.

The C++11 features that Lattice Builder uses are:
- auto-typed variables
- range-based for-loop
- std::function and std::bind
- rvalue references
- move constructors and assignment operators
- static assertions
- extern templates
- null pointer constant
- strongly typed enums
- initializer lists
- non-static data member initializers
- template aliases

<!--
If a recent enough version of GCC is not available on your Linux system, you can
install GCC manually by customizing and running the script \c install-gcc.sh
that can found under the \c scripts directory with the source code.
-->


\subsection builddeps_python Python 2.7

Lattice Builder relies on the <a
href="https://code.google.com/p/waf/"><strong>waf</strong>
meta build system</a> for configuring and compiling the software source.
Waf is included in the Lattice Builder source tree, but it depends on <a
href="http://python.org/download">Python 2.7</a>, which must be available
on the host on which Lattice Builder is to be compiled.


\subsection builddeps_boost Boost C++ Libraries

The Lattice Builder library depends on the following
<a href="http://www.boost.org/">Boost libraries</a>:
<ul>
	<li><a href="http://www.boost.org/doc/libs/1_48_0/libs/math/doc/html/index.html">Math</a></li>
	<li><a href="http://www.boost.org/doc/libs/release/libs/numeric/ublas/doc/index.htm">uBLAS</a></li>
	<li><a href="http://www.boost.org/doc/libs/release/libs/iterator/doc/index.html">Iterator</a></li>
	<li><a href="http://www.boost.org/doc/libs/release/libs/accumulators/">Accumulators</a></li>
	<li><a href="http://www.boost.org/doc/libs/release/libs/signals2/">Signals2</a></li>
	<li><a href="http://www.boost.org/doc/libs/release/libs/tokenizer/index.html">Tokenizer</a></li>
	<li><a href="http://www.boost.org/doc/libs/release/libs/conversion/lexical_cast.htm">Lexical Cast</a></li>
</ul>

In addition to these, the Lattice Builder command-line tool also depends on the
following
<a href="http://www.boost.org/">Boost libraries</a>:
<ul>
	<li><a href="http://www.boost.org/doc/libs/release/doc/html/program_options.html">Program Options</a></li>
	<li><a href="http://www.boost.org/doc/libs/release/libs/chrono/index.html">Chrono</a></li>
</ul>

Only the Program Options and Chrono libraries require building and linking; the
others are header-only libraries.

Installation instructions for the
<a href="http://www.boost.org/">Boost libraries</a>
can be found on the
<a href="http://www.boost.org/doc/libs/release/more/getting_started/">Getting Started</a>
page for
<a href="http://www.boost.org/doc/libs/release/more/getting_started/unix-variants.html">Unix variants</a>
or for
<a href="http://www.boost.org/doc/libs/release/more/getting_started/windows.html">Microsoft Windows</a>.


\subsection builddeps_fftw FFTW Library

The fast CBC implementation of Lattice Builder depends on the
<a href="http://www.fftw.org/">FFTW library</a>.


\section sourcecode Obtaining the source code

Get the latest source tree from GitHub, either by typing:
\code{.sh}
git clone https://github.com/mungerd/latbuilder.git
\endcode
If you do not have <a href="http://git-scm.com/">Git</a> installed, you can
click on the <a
href="https://github.com/mungerd/latbuilder/archive/master.zip">Download
ZIP</a> link from the <a href="https://github.com/mungerd/latbuilder">Lattice
Builder GitHub page</a>,
then by unzipping the downloaded archive.

\section buildcompile Compiling Lattice Builder

\note The commands below should work verbatim under Linux and OS X systems.
For Windows systems, every instance of <code>./waf</code> should be replaced
with <code>python waf</code>, assuming that the Python executable
(<code>python.exe</code>) is accessible from the system <code>%PATH%</code>
environment variable.  Otherwise, the full path to the <code>python.exe</code>
executable should be used.

Change the current directory to the root directory of the package, for example:
\code{.sh}
cd latbuilder
\endcode
if you obtained the source code with the \c git command.
If you obtained the source code from the ZIP archive, the directory should be
named \c latbuilder-master instead of \c latbuilder.
At the root of the source tree lies the \c waf script, manages the build
process.
Try:
\code{.sh}
./waf --help
\endcode
to see the various commands and options.
The most relevant options include \c \-\-out to specify the directory in which the
files created during the build process will be place, \c \-\-prefix to specify
the directory under which Lattice Builder will be installed, and \c \-\-boost and
\c \-\-fftw to specify the directories under which Boost and FFTW were installed.
First, the project must be configured with:
\code{.sh}
./waf --prefix $HOME/latsoft configure
\endcode
with \c $HOME/latsoft replaced with the directory into which Lattice
Builder should be installed.
If Boost and FFTW are not part of the standard system installation and were
manually installed under \c /boost/prefix and \c /fftw/prefix, for example, the
following command indicates \c waf where to find these two libraries:
\code{.sh}
./waf --prefix $HOME/latsoft --boost /boost/prefix --fftw /fftw/prefix configure
\endcode
It is possible to set the \c CXX environment variable to the path to a specific
C++ compiler to be used to build Lattice Builder, before running the <code>waf
configure</code> command.

Then, if everything is configured correctly, the following command will build the
Lattice Builder library and command-line tool:
\code{.sh}
./waf build
\endcode
If <a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a> is available,
the documentation will also be generated.

If the build process completed without errors, Lattice Builder can be installed
to \c $HOME/latsoft, as specified in the configuration step, with:
\code{.sh}
./waf install
\endcode
The Lattice Builder executable can be found at \c
$HOME/latsoft/bin/latbuilder (with a \c .exe extension under Windows
systems).
If it was generated, the documentation can be accessed by pointing a web
browser to the file \c $HOME/latsoft/share/doc/latbuilder/index.html.

To check that the program installed correctly, try:
\code{.sh}
$HOME/latsoft/latbuilder --version
\endcode
Help on usage can be obtained by replacing the \c \-\-version switch with the \c
\-\-help switch.
It may be necessary to copy the Boost and FFTW libraries into the same
directory as the \c latbuilder executable program, or to indicate where to find
them in the \c LD_LIBRARY_PATH environment variable for Linux and OS X systems.



\section buildlink Linking Software with Lattice Builder

Software can use the Lattice Builder libraries by setting the compiler to use
the C++11 standard, by adding \c $HOME/latsoft/include to the include
path, by adding \c $HOME/latsoft/lib to the library path, and by linking
with the \c latcommon and \c latbuilder libraries in the latter directory,
together with the \c boost_program_options, \c boost_chrono, \c boost_system
and \c fftw3 libraries.

An example \c Makefile to build a project that uses the Lattice Builder
application programming interface (API) can be found under
\c $HOME/latsoft/share/doc/latbuilder/examples/myproject.

A lot of example code using the Lattice Builder API can be found under the \c
latbuilder/examples directory of the source package and in its subdirectories.

\remark Tip for interpreting compiler errors.  Compiler error messages can be
very verbose when the pertain to the usage of C++ templates.
Compiler messages can be made easier to read by adding an empty line after each
message, e.g., by piping the original messages through <code>sed 'a\ '</code>,
then by using a text search function to locate the "error:" string.


*/
vim: ft=doxygen spelllang=en spell
